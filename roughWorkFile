import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.*;

import java.util.Random;
import javax.imageio.ImageIO;
import javax.servlet.*;
import javax.servlet.http.*;


public class CaptchaServlet extends HttpServlet {


  protected void processRequest(HttpServletRequest request, 
                                HttpServletResponse response) 
                 throws ServletException, IOException {

    int width = 150;
    int height = 50;

    char data[][] = {
        { 'z', 'e', 't', 'c', 'o', 'd', 'e' },
        { 'l', 'i', 'n', 'u', 'x' },
        { 'f', 'r', 'e', 'e', 'b', 's', 'd' },
        { 'u', 'b', 'u', 'n', 't', 'u' },
        { 'j', 'e', 'e' }
    };


    BufferedImage bufferedImage = new BufferedImage(width, height, 
                  BufferedImage.TYPE_INT_RGB);

    Graphics2D g2d = bufferedImage.createGraphics();

    Font font = new Font("Georgia", Font.BOLD, 18);
    g2d.setFont(font);

    RenderingHints rh = new RenderingHints(
           RenderingHints.KEY_ANTIALIASING,
           RenderingHints.VALUE_ANTIALIAS_ON);

    rh.put(RenderingHints.KEY_RENDERING, 
           RenderingHints.VALUE_RENDER_QUALITY);

    g2d.setRenderingHints(rh);

    GradientPaint gp = new GradientPaint(0, 0, 
    Color.red, 0, height/2, Color.black, true);

    g2d.setPaint(gp);
    g2d.fillRect(0, 0, width, height);

    g2d.setColor(new Color(255, 153, 0));

    Random r = new Random();
    int index = Math.abs(r.nextInt()) % 5;

    String captcha = String.copyValueOf(data[index]);
    request.getSession().setAttribute("captcha", captcha );

    int x = 0; 
    int y = 0;

    for (int i=0; i<data[index].length; i++) {
        x += 10 + (Math.abs(r.nextInt()) % 15);
        y = 20 + Math.abs(r.nextInt()) % 20;
        g2d.drawChars(data[index], i, 1, x, y);
    }

    g2d.dispose();

    response.setContentType("image/png");
    OutputStream os = response.getOutputStream();
    ImageIO.write(bufferedImage, "png", os);
    os.close();
  } 


  protected void doGet(HttpServletRequest request, 
                       HttpServletResponse response)
                           throws ServletException, IOException {
      processRequest(request, response);
  } 


  protected void doPost(HttpServletRequest request, 
                        HttpServletResponse response)
                            throws ServletException, IOException {
      processRequest(request, response);
  }
}

/*<img src="CaptchaServlet">  will get the image http://www.mkyong.com/struts2/struts-2-dynamic-image-example/*/

=======================
public class EncryptData 
{
    public static void main(String[] args)throws Exception
    {
        Long a =12345L;
        Long b=(a*5)-250;
        String topass=b.toString();
        System.out.println(b);
        String pass=topass.substring(0, 3) + (int)(Math.random() * 100) + topass.substring(3, topass.length())+(int)(Math.random() * 100);
        System.out.println("pass "+pass);
        String recov=pass.substring(0, 3)+pass.substring(5, pass.length()-2);
        System.out.println("recov "+recov);
        Long c=(Long.parseLong(recov)+250)/5;
        System.out.println(c);
       
    }
}

=================================
1 / 7 /2014



<c:choose>
				    <c:when test="${sessionScope.currentUser != null && sessionScope.currentUser.userId > 0 }">
				        <li><a href="placeregistration.jsp">Register my place</a></li>
				    </c:when>
				    <c:otherwise>
				        <li><a href="#">Log in </a> </li>
				    </c:otherwise>
				</c:choose>
				
				
				
SaveUserDetailAction  extends ActionSupport implements SessionAware
Map<String, Object> sessionMap;
	 
	@Override
	 public void setSession(Map session) {
	    this.sessionMap = session;
	  }
	  
	  sessionMap.put("currentUser", userbean);
	  
	  
	  
	  <action name="checkLogin" class="com.getbestplace.action.LoginAction">
			<exception-mapping exception="java.lang.Exception"  result="error" />
			<result name="success">Welcome.jsp</result>
			<result name="error">Login.jsp</result>
		</action>





=================================

C3p0 change the order in hib.cfg.xml:

<!-- using hibernates c3p0 pool provider  -->
    <property name="hibernate.c3p0.min_size">7</property>
    <property name="hibernate.c3p0.max_size">30</property>
    <property name="hibernate.c3p0.timeout">300</property>
    <property name="hibernate.c3p0.max_statements">70</property>
    <property name="hibernate.c3p0.idle_test_period">3000</property>
    
    <!-- Names the annotated entity class -->
    <mapping class="com.getbestplace.model.User"/>
	

File upload:

struts.xml
<action name="userImage" class="com.getbestplace.action.FileUploadAction">
	    <interceptor-ref name="fileUpload">
         <param name="maximumSize">2097152</param>
         <param name="allowedTypes">
             image/png,image/gif,image/jpeg,image/pjpeg
         </param>
       </interceptor-ref>
	    <interceptor-ref name="defaultStack"></interceptor-ref>
	    <result name="success">success.jsp</result>
	    <result name="input">index.jsp</result>
	    <result name="error">error.jsp</result>
	</action>
	
FileUploadAction.java	
package com.getbestplace.action;

import java.io.File;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.apache.struts2.interceptor.ServletRequestAware;

import com.opensymphony.xwork2.ActionSupport;

public class FileUploadAction extends ActionSupport implements ServletRequestAware {
 private static final long serialVersionUID = 1L;
 private File userImage;
 private String userImageContentType;
 private String userImageFileName;
 
 private HttpServletRequest servletRequest;
 
 public String execute() {
  try {
      String filePath = servletRequest.getSession().getServletContext().getRealPath("/");
      System.out.println("Server path:" + filePath);
      new File(filePath+"\\\\location\\\\placename").mkdirs();
      filePath+="\\\\places\\\\pune\\\\beautifulplace\\\\";
      File fileToCreate = new File(filePath, this.userImageFileName);
  
      FileUtils.copyFile(this.userImage, fileToCreate);
  } catch (Exception e) {
      e.printStackTrace();
      addActionError(e.getMessage());
 
      return INPUT;
  }
  return SUCCESS;
 }
 
 public File getUserImage() {
  return userImage;
 }
 
 public void setUserImage(File userImage) {
  this.userImage = userImage;
 }
 
 public String getUserImageContentType() {
  return userImageContentType;
 }
 
 public void setUserImageContentType(String userImageContentType) {
  this.userImageContentType = userImageContentType;
 }
 
 public String getUserImageFileName() {
  return userImageFileName;
 }
 
 public void setUserImageFileName(String userImageFileName) {
  this.userImageFileName = userImageFileName;
 }
 
 @Override
 public void setServletRequest(HttpServletRequest servletRequest) {
  this.servletRequest = servletRequest;
 }
}

index.jsp
<%@ page contentType="text/html; charset=UTF-8"%>  
<%@ taglib prefix="s" uri="/struts-tags"%>  
<html>  
<head>  
<title>Upload User Image</title>  
</head>  
   
<body>  
<h2>Struts2 File Upload & Save Example</h2>  
<s:actionerror />  
<s:form action="userImage" method="post" enctype="multipart/form-data">  
    <s:file name="userImage" label="User Image" size="10"/>  
    <s:submit value="Upload" align="center" />  
</s:form>  
</body>  
</html>  

Success.jsp
<%@ page contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="s" uri="/struts-tags"%>
<html>
<head>
<title>Success: Upload User Image</title>
</head>
<body>
    <h2>Struts2 File Upload Example</h2>
    User Image: <s:property value="userImage"/>
    

    Content Type: <s:property value="userImageContentType"/>
    

    File Name: <s:property value="userImageFileName"/>
    

    Uploaded Image:
    

    <img src="<s:property value="userImageFileName"/>"/>
</body>
</html>

add jars:
commons-io
commons-fileupload from struts lib

helplink
http://www.dineshonjava.com/2013/07/struts-2-file-upload-example.html#.U7YtYvmSxHs


=================================
